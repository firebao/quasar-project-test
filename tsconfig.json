{
  /*
   * @Author       : wwj 318348750@qq.com
   * @Date         : 2024-03-05 11:01:09
   * @LastEditors  : wwj 318348750@qq.com
   * @LastEditTime : 2024-04-07 14:57:38
   * @Description  : 规范的tsconfig文件,包含所有配置项以及配置项说明，tsc版本适配5.3.3
   * @link         : Visit https://aka.ms/tsconfig to read more about this file
   *
   * Copyright (c) 2024 by sjft email: 318348750@qq.com, All Rights Reserved.
   */

  /* extends */
  // "extends": "@tsconfig/node16/tsconfig.json",         /* 继承预设的配置文件，例1：从npm中继承 */
  "extends": "@quasar/app-vite/tsconfig-preset",
  // "extends": "../tsconfig.base.json"                /* 指定所要继承的配置文件,例2: 从本地文件中继承 */

  /* exclude */
  // "exclude": ["**/*.spec.ts"]                       /* 从编译列表去除指定的文件 */

  /* files */
  // "files": ["a.ts", "b.ts"]                         /* 指定需要编译的文件列表，不支持文件匹配，文件较多，建议使用include和exclude属性

  /* include */
  "include": [
    "index.ts",
    "src/**/*",
    "tests/**/*",
    "test/vitest/__tests__/utils/db.spec.ts",
    "test/vitest/__tests__/utils/db.spec.ts"
  ] /* 指定需要编译的文件列表，支持通配符，文件位置相对于当前位置文件 */,
  /* 不指定文件后缀，默认包含.ts .tsx .d.ts，如果打开了allowJs，那么还包括.js和.jsx  */
  /* include支持三种通配符 */
  /* ? : 指代单个字符 */
  /* * : 指代任意字符，不含路径分隔符 */
  /* ** : 指代任意目录层级 */

  /* references */ /* 适合一个大项目由许多小项目构成的情况，用来设置需要引用的底层项目 */
  // "references": [                                   /* references数组成员对象的path属性，既可以是含有文件tsconfig.json的目录 */
  //   { "path": "../pkg1" },                          /* 引用的底层项目的tsconfig.json必须启用composite属性 */
  //   { "path": "../pkg2/tsconfig.json" }
  // ]

  "compilerOptions": {
    /* 定制编译行为, 可以省略，这时编译器将使用默认设置 */

    /* 类型检查相关 */
    // "allowUnreachableCode": true,                     /* 设置是否允许存在不可能执行到的代码。它的值有三种可能。 */
    /* undefined： 默认值，编辑器显示警告 */
    /* true：忽略不可能执行到的代码 */
    /* false：编译器报错 */
    // "allowUnusedLabels": true,                        /* 设置是否允许存在没有用到的代码标签（label）。它的值有三种可能。 */
    /* undefined： 默认值，编辑器显示警告 */
    /* true：忽略没有用到的代码标签 */
    /* false：编译器报错 */
    // "alwaysStrict": true,                             /* 确保脚本以 ECMAScript 严格模式进行解析，因此脚本头部不用写"use strict"。它的值是一个布尔值，默认为true */
    // "exactOptionalPropertyTypes": true,               /* 设置可选属性不能赋值为undefined */
    // "noFallthroughCasesInSwitch": true,               /* 设置是否对没有break语句（或者return和throw语句）的 switch 分支报错，即case代码里面必须有终结语句（比如break） */
    // "noImplicitAny": true,                            /* 设置当一个表达式没有明确的类型描述、且编译器无法推断出具体类型时，是否允许将它推断为any类型, 默认为true，即只要推断出any类型就报错 */
    // "noImplicitOverride": true,                       /* 确保子类中的方法正确地覆盖了基类中的方法。当使用了 override 关键字时，TypeScript 将会在子类中检查覆盖的方法是否存在于基类中，从而避免子类与基类中的方法不同步的情况 */
    // "noImplicitReturns": true,                        /* 设置是否要求函数任何情况下都必须返回一个值，即函数必须有return语句 */
    // "noImplicitThis": true,                           /* 设置如果this被推断为any类型是否报错 */
    // "noPropertyAccessFromIndexSignature": true,       /* 设置确保通过“点”语法（obj.key）和“索引”语法（obj["key"]）访问字段时，与类型中属性声明的方式保持一致 */
    // "noUncheckedIndexedAccess": true,                 /* 如果启用了 noUncheckedIndexedAccess 标志，TypeScript 将会对未声明的属性添加 undefined 类型，以增强类型检查的严格性 */
    // "noUnusedLocals": true,                           /* 设置是否允许未使用的局部变量，true不允许 */
    // "noUnusedParameters": true,                       /* 设置是否允许未使用的函数参数，true不允许 */
    "strict": true /* 用来打开 TypeScript 的严格检查。它的值是一个布尔值，默认是关闭的，这个设置相当于同时打开以下的一系列设置 */,
    /* alwaysStrict|strictNullChecks|strictBindCallApply|strictFunctionTypes|strictPropertyInitialization|noImplicitAny */
    /* noImplicitThis|useUnknownInCatchVariables */
    // "strictBindCallApply": true,                      /* 设置是否对函数的call()、bind()、apply()这三个方法进行类型检查 */
    // "strictFunctionTypes": true,                      /* 允许对函数更严格的参数检查。具体来说，如果函数 B 的参数是函数 A 参数的子类型，那么函数 B 不能替代函数 A */
    // "strictNullChecks": true,                         /* 设置对null和undefined进行严格类型检查 */
    // "strictPropertyInitialization": true,             /* 设置类的实例属性都必须初始化，包括以下几种情况 */
    /* undefined： 设为undefined类型 */
    /* 显式初始化*/
    /* 构造函数中赋值 */
    // "useUnknownInCatchVariables": true,               /* 设置catch语句捕获的try抛出的返回值类型，从any变成unknown */

    /* Modules 模块相关 */
    // "allowArbitraryExtensions": true,                 /* 当一个导入路径以不是已知的 JavaScript 或 TypeScript 文件扩展名结尾时，编译器将会寻找一个以 {文件基础名称}.d.{扩展名}.ts 的形式命名的声明文件 */
    // "allowUmdGlobalAccess": true,                     /* 设置为 true 时，将允许你在模块文件中以全局变量的形式访问 UMD 的导出 */
    // "baseUrl": "./",                                  /* 指定 TypeScript 项目的基准目录 */
    // "customConditions": [],                           /* 允许你指定一系列附加条件，在 TypeScript 解析 package.json 文件中的 exports 或 imports 字段时应该成功,该字段仅在 --moduleResolution 选项为 node16、nodenext 或 bundler 时有效 */
    "module": "esnext" /* 指定编译产物的模块格式。它的默认值与target属性有关，如果target是ES3或ES5，它的默认值是commonjs，否则就是ES6/ES2015 */,
    /* none|commonjs|amd|umd|system|es6/es2015|es2020|es2022|esnext|node16|nodenext */
    "moduleResolution": "node16" /* 确定模块路径的算法，即如何查找模块。它可以取以下四种值 */,
    /* node：采用 Node.js 的 CommonJS 模块算法 */
    /* node16或nodenext：采用 Node.js 的 ECMAScript 模块算法，从 TypeScript 4.7 开始支持 */
    /* classic：TypeScript 1.6 之前的算法，新项目不建议使用 */
    /* bundler：TypeScript 5.0 新增的选项，表示当前代码会被其他打包器（比如 Webpack、Vite、esbuild、Parcel、rollup、swc）处理，从而放宽加载规则，它要求module设为es2015或更高版本 */
    // "moduleSuffixes": [],                             /* moduleSuffixes指定模块的后缀名 */
    // "noResolve": true,                                /* 当设置了 noResolve 选项时，TypeScript 不会自动解析和添加导入的文件到你的程序中，但它仍然会检查导入语句是否指向有效的模块。这意味着你需要手动确保你的导入语句指向了正确的模块，而不依赖于 TypeScript 的自动解析机制 */
    "paths": {
      /* 设置模块名和模块路径的映射，也就是 TypeScript 如何导入require或imports语句加载的模块 */
      "utils/*": ["./utils/*"],
      "src/*": ["./src/*"],
      "components/*": ["./src/components/*"],
      "layouts/*": ["./src/layouts/*"],
      "assets/*": ["./src/assets/*"],
      "config/*": ["./src/config/*"],
      "hooks/*": ["./src/hooks/*"],
      "@types/*": ["./src/types/*"]
    },
    "resolveJsonModule": true /* 允许 import 命令导入 JSON 文件 */,
    // "resolvePackageJsonExports": true,                /* 选项允许 TypeScript 在解析来自 node_modules 的包时考虑其 package.json 文件中的 exports 字段，以便正确地处理导入的内容 */
    /* --moduleResolution 选项为 node16、nodenext 或 bundler 时，--resolvePackageJsonExports 选项会设置为 true */
    // "resolvePackageJsonImports": true,                /* 选项允许 TypeScript 在执行以 # 开头的导入查找时，查阅 package.json 文件中的 imports 字段，以便正确地处理导入的内容 */
    /* --moduleResolution 选项为 node16、nodenext 或 bundler 时，--resolvePackageJsonImports 选项会设置为 true */
    // "rootDir": "./",                                  /* 指定 TypeScript 项目的基准目录, 默认是以 tsconfig.json 的位置作为基准目录 */
    // "rootDirs": [],                                   /* 通过 rootDirs，你可以告诉编译器有许多“虚拟”的目录作为一个根目录。这将会允许编译器在这些“虚拟”目录中解析相对应的模块导入，就像它们被合并到同一目录中一样 */
    "typeRoots": [
      /* 默认情况下，所有 可见 的 ”@types” 包都将包含在你的编译过程中，当 typeRoots 被指定，仅有 在 typeRoots 下的包会被包含。 */
      "./typings",
      "./types",
      "./node_modules/@types"
    ],
    "types": [
      /* 默认情况下，所有 可见 的 ”@types” 包都将包含在你的编译过程中，当 types 被指定，则只有列出的包才会被包含在全局范围内 */
      "vite/client",
      // 参看https://cn.vuejs.org/guide/scaling-up/testing.html
      "vitest/globals"
    ],

    /* Emit 代码转换 */
    "declaration": true /* 设置编译时是否为每个脚本生成类型声明文件.d.ts */,
    "declarationDir": "./typings" /* 设置生成的.d.ts文件所在的目录 */,
    // "declarationMap": true,                           /* 设置生成.d.ts类型声明文件的同时，还会生成对应的 Source Map 文件 */
    // "downlevelIteration": true,                       /* 这个选项是为了在旧版 Javascript 运行时上更准确的实现现代 JavaScript 迭代器的概念 */
    // "emitBOM": true,                                  /* emitBOM设置是否在编译结果的文件头添加字节顺序标志 BOM，默认值是false */
    // "emitDeclarationOnly": true,                      /* 设置编译后只生成.d.ts文件，不生成.js文件 */
    // "importHelpers": true,                            /* 对于某些降级行为，TypeScript 使用一些辅助代码来进行操作。例如继承类，展开数组或对象，以及异步操作 */
    /* 默认情况下，这些辅助代码被插入到使用它们的文件中。 如果在许多不同的模块中使用相同的辅助代码，则可能会导致代码重复 */
    /* 如果启用了 importHelpers 选项，这些辅助函数将从 tslib 中被导入。 你需要确保 tslib 模块在运行时可以被导入。 这只影响模块，全局脚本文件不会尝试导入模块 */
    // "importsNotUsedAsValues": "remove",               /* 这个标志控制着 import 语句的行为，具体有以下三种选项 */
    /* remove: 这是默认行为，会删除那些仅引用类型但未被使用的 import 语句 */
    /* preserve: 保留所有 import 语句，无论其值或类型是否被使用，这可能导致 import 语句和其相关的副作用被保留 */
    /* error: 与保留选项类似，它会保留所有 import 语句。但是，当一个值 import 只被用作类型时，会报错。这可能在你希望确保没有值被意外地导入，但仍然使副作用导入显式化时非常有用 */
    // "inlineSourceMap": true,                          /* 设置将 SourceMap 文件写入编译后的 JS 文件中，否则会单独生成一个.js.map文件 */
    // "inlineSources": true,                            /* 设置将原始的.ts代码嵌入编译后的 JS 中 */
    // "mapRoot": "",                                    /* 指定 SourceMap 文件的位置，而不是默认的生成位置 */
    // "newLine": "crlf",                                /* 设置换行符为CRLF（Windows）还是LF（Linux） */
    "noEmit": true /* 禁止编译器生成文件，例如 JavaScript 代码，source-map 或声明，如果不生成，TypeScript 编译就纯粹作为类型检查了 */,
    // "noEmitHelpers": true,                            /* 设置在编译结果文件不插入 TypeScript 辅助函数，而是通过外部引入辅助函数来解决，比如 NPM 模块tslib */
    // "noEmitOnError": true,                            /* 指定一旦编译报错，就不生成编译产物，默认为false */
    "outDir": "./ts-dist" /* 如果被指定，.js （以及 .d.ts, .js.map 等）将会被生成到这个目录下,如果没有指定，.js 将被生成至于生成它们的 .ts 文件相同的目录中 */,
    // "outFile": "./",                                  /* 如果被指定，所有 全局 （非模块） 文件将被合并到指定的单个输出文件中, 除非 module 是 None，System 或 AMD， 否则不能使用 outFile*/
    // "preserveConstEnums": true,                       /* 防止 TypeScript 在生成的代码中完全移除对 const enum 的声明 */
    // "preserveValueImports": true,                     /* 防止 TypeScript 移除导入，即使它看起来未被使用 */
    // "removeComments": true,                           /* 当转换为 JavaScript 时，忽略所有 TypeScript 文件中的注释 */
    "sourceMap": true /* 设置编译时是否生成 SourceMap 文件 */,
    // "sourceRoot": "",                                 /* 在 SourceMap 里面设置 TypeScript 源文件的位置 */
    // "stripInternal": true,                            /* 用于控制是否在生成的声明文件（.d.ts 文件）中排除带有 @internal 注解的 JSDoc 注释的代码 */

    /* JS支持 JavaScript Support */
    // "allowJs": true,                                  /* 允许 JavaScript 文件在你的工程中被引入，而不是仅仅允许 .ts 和 .tsx 文件 */
    // "checkJs": true,                                  /* checkJS设置对 JS 文件同样进行类型检查。打开这个属性，也会自动打开allowJs。它等同于在 JS 脚本的头部添加// @ts-check命令 */
    // "maxNodeModuleJsDepth": 1,                        /* 当开启 allowJs 选项时，可以使用这个标志。它的作用是让 TypeScript 推断 node_modules 内所有 JavaScript 文件的类型 */

    /* 编辑器支持 Editor Support */
    // disableSizeLimit: true                            /* 这个选项允许 TypeScript 在处理非常大的 JavaScript 项目时，不再受到预设的内存限制的限制，从而可以更有效地处理大型项目 */
    // plugins: []

    /* 互操作性约束 Interop Constraints */
    // "allowSyntheticDefaultImports": true,             /* 允许import命令默认加载没有default输出的模块,比如，打开这个设置，就可以写import React from "react";，而不是import * as React from "react"; */
    "esModuleInterop": true /* 修复了一些 CommonJS 和 ES6 模块之间的兼容性问题，当启用 esModuleInterop 时，将同时启用 allowSyntheticDefaultImports */,
    "forceConsistentCasingInFileNames": true /* 设置文件名是否为大小写敏感，默认为true */,
    // "isolatedModules": true,                          /* 设置如果当前 TypeScript 脚本作为单个模块编译，是否会因为缺少其他脚本的类型信息而报错，主要便于非官方的编译工具（比如 Babel）正确编译单个脚本 */
    // "preserveSymlinks": true,                         /* 这是为了匹配 Node.js 中相同的选项，它不解析符号链接的真实路径 */
    // "verbatimModuleSyntax": true,                     /* 任何不带类型修饰符的导入或导出都会被保留，而使用类型修饰符的内容会被完全删除 */
    /* 如果module属性为node16或nodenext，则esModuleInterop默认为true，其他情况默认为false */
    /* 打开esModuleInterop，将自动打开allowSyntheticDefaultImports */

    /* 向后兼容性 Backwards Compatibility */
    // "charset": 'utf8',                                /* 指定文件编码格式 */
    // "keyofStringsOnly": true,                         /* 标志用于帮助用户保持 TypeScript 2.9 发布之前的行为,该标志将 keyof 类型操作符的行为更改为，在应用于具有字符串索引签名的类型时返回 string 而不是 string | number */
    // "noImplicitUseStrict": true,                      /* 这个选项是为了在特殊情况下，当你不希望在非 ES6 目标上生成严格模式声明时提供的, 禁止生成 "use strict" */
    // "noStrictGenericChecks": true,                    /* 取消TypeScript 在比较两个泛型函数时，会统一类型参数的行为 */
    // "out": "./",                                      /* 同outFile */
    // "suppressExcessPropertyErrors": true,             /* 用于禁用对对象字面量中多余属性的报告,此选项是为了帮助开发人员在迁移到 TypeScript 1.6 时进行适应 */
    // "suppressImplicitAnyIndexErrors": true,           /* 这个选项的作用是在对象索引时，如果涉及到隐式的 any 类型，那么会禁止报告相应的错误信息 */

    /* 语言和环境 Language and Environment */
    // "emitDecoratorMetadata": true,                    /* 用于启用对装饰器的类型元数据的实验性支持，该类型元数据与 reflect-metadata 模块配合使用 */
    // "experimentalDecorators": true,                   /* 用于启用对装饰器的实验性支持 */
    // "jsx": "preserve",                                /* 设置如何处理.tsx文件。它可以取以下五个值 */
    /* preserve：保持 jsx 语法不变，输出的文件名为.jsx */
    /* react：将<div />编译成React.createElement("div")，输出的文件名为.js */
    /* react-native：保持 jsx 语法不变，输出的文件后缀名为.js */
    /* react-jsx：将<div />编译成_jsx("div")，输出的文件名为.js */
    /* react-jsxdev：跟react-jsx类似，但是为_jsx()加上更多的开发调试项，输出的文件名为.js */
    // "jsxFactory": "",                                 /* JSX 运行时编译 JSX 元素时更改在 .js 文件中调用的函数 */
    // "jsxFragmentFactory": "",                         /* TypeScript 的配置文件（tsconfig.json）中指定 JSX 片段（Fragment）的工厂函数 */
    // "jsxImportSource": "",                            /* 选项允许开发者在使用 JSX 时指定导入新的 JSX 转换所需的模块 */
    // "lib": [],                                        /* lib值是一个数组，描述项目需要加载的 TypeScript 内置类型描述文件，跟三斜线指令/// <reference lib="" />作用相同 */
    /* ES5|ES2015|ES6|ES2016|ES7|ES2017|ES2018|ES2019|ES2020|ES2021|ES2022|ESNext|DOM|WebWorker|ScriptHost */
    // "moduleDetection": "auto",                        /* 控制 TypeScript 如何确定一个文件是脚本还是模块 */
    /* auto 默认 TypeScript 会自动判断文件是脚本还是模块，根据文件的内容以及环境的配置来确定 */
    /* legacy 与 TypeScript 4.6 及之前版本的行为相同，仅使用 import 和 export 语句来确定文件是否为模块 */
    /* force 确保每个非声明文件都被视为模块。无论文件的内容如何，都将其视为模块文件而不是脚本文件 */
    // "noLib": true,                                    /* 允许开发者禁用默认的库文件自动包含行为，并自行提供自定义的类型定义文件，以满足特定项目的需求 */
    // "reactNamespace": "",                             /* 同jsxFactory */
    "target": "es2016" /* 编译出来的 JavaScript 代码的 ECMAScript 版本 */
    // "useDefineForClassFields": true,                  /* 选项用于在迁移到即将推出的标准版本的类字段时进行设置 */

    /* 编译器诊断 Compiler Diagnostics */
    // "diagnostics": "",                                /* extendedDiagnostics设置项 */
    // "explainFiles": true,                             /* 调试一个文件是如何成为编译的一部分的过程 */
    // "extendedDiagnostics": true,                      /* 了解编译过程中耗费时间的具体情况 */
    // "generateCpuProfile": true,                       /* 为开发者提供了一种分析 TypeScript 编译性能的工具，通过生成 CPU profile，可以帮助开发者理解编译过程中代码的执行情况 */
    // "listEmittedFiles": true,                         /* 标志用于在终端上打印编译过程中生成的文件的名称 */
    // "listFiles": true,                                /* 为开发者提供了一种手段来检查编译过程中实际包含的文件列表，从而帮助解决文件包含相关的问题 */
    // "traceResolution": true,                          /* 为开发者提供了一种跟踪 TypeScript 模块解析过程的方式，用于调试和解决模块未被包含在编译中的问题 */

    /* 工程属性 Projects */
    // "composite": true,                                /* composite打开某些设置，使得 TypeScript 项目可以进行增量构建，往往跟incremental属性配合使用 */
    // "disableReferencedProjectLoad": true,             /* 为开发者提供了一种在处理大型 TypeScript 程序时优化性能的方式，通过动态加载项目来减轻内存压力，从而提高编辑器的响应速度 */
    // "disableSolutionSearching": true,                 /* 为开发者提供了一种在处理大型复合 TypeScript 项目时优化编辑器响应速度的方式，通过排除某些项目来提高编辑器的性能 */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 为开发者提供了一种在处理复合 TypeScript 项目时控制模块边界行为的方式，可以选择使用 .d.ts 文件作为模块边界，以回到 3.7 版本之前的行为 */
    // "incremental": true,                              /* 让 TypeScript 项目构建时产生文件tsbuildinfo，从而完成增量构建 */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* 选项可以让您指定一个文件来存储增量编译信息，以作为复合工程的一部分，从而可以更快的构建更大的 TypeScript 代码库 */

    /* 输出格式 Output Formatting */
    // "noErrorTruncation": true,                        /* 不截断错误信息 */
    // "preserveWatchOutput": true,                      /* 在监视模式（watch mode）下的一个选项，该选项决定是否在每次发生更改时清除屏幕，而是保留过时的控制台输出 */
    // "pretty": true,                                   /* 功能允许使用颜色和上下文来使错误和消息具有样式化效果 */

    /* 完整性 Completeness */
    // "skipDefaultLibCheck": true,                      /* skipLibCheck 替代， 跳过对默认库声明文件的类型检查*/
    // "skipLibCheck": true                              /* 跳过声明文件的类型检查 */
  }
}
